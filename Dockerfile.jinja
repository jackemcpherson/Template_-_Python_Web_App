# Dockerfile

# ---- Builder Stage ----
# This stage is responsible for installing dependencies. It contains build tools
# and the full Python installation, which are not needed in the final image.
FROM python:3.12-slim-bullseye AS builder

# Set environment variables for Python and uv.
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV UV_VENV_PATH=/opt/venv

# Install uv, the fast Python package installer.
RUN pip install uv

# Create a virtual environment in a standard location.
RUN uv venv $UV_VENV_PATH

# Activate the virtual environment for subsequent commands.
ENV PATH="$UV_VENV_PATH/bin:$PATH"

# Copy the project files into the build context.
WORKDIR /app
COPY . .

# Install the project and its runtime dependencies into the virtual environment.
RUN uv pip install .

# ---- Final Stage ----
# This stage builds the final, minimal production image.
FROM python:3.12-slim-bullseye AS final

# Set environment variables.
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Create a non-root user and group for security.
# Running containers as a non-root user is a critical security best practice.
RUN addgroup --system --gid 1001 appgroup && \
    adduser --system --uid 1001 --gid 1001 appuser

# Copy the virtual environment with all its dependencies from the builder stage.
COPY --from=builder /opt/venv /opt/venv

# Copy the application source code into the image.
WORKDIR /app
COPY --from=builder /app/src ./src

# Activate the virtual environment.
ENV PATH="/opt/venv/bin:$PATH"

# Switch to the non-root user.
USER appuser

# Expose the port the application will run on.
EXPOSE 8000

# Define the command to run the application using uvicorn.
# It listens on all interfaces (0.0.0.0) so it's accessible from outside the container.
CMD ["uvicorn", "{{ project_name | lower | replace(' ', '_') }}.main:app", "--host", "0.0.0.0", "--port", "8000"]
